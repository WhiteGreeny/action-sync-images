name: Docker Image Sync Batch

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:
jobs:

  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://${{ secrets.REGISTRY_URL }}
          username: "${{ secrets.DOCKER_USERNAME }}"
          password: "${{ secrets.DOCKER_PASSWORD }}"
      - name: Build and push image
        run: |
          # 读取文件内容，逐行处理
          while IFS= read -r line; do
              if grep -q "^#" <<< "$line"; then
                  # 如果是注释行，则跳过处理
                  continue
              elif [ -z "$line" ]; then
                  # 如果是空行，则跳过处理
                  continue
              elif grep -q "," <<< "$line"; then
                  # 如果包含逗号，则使用 cut 命令进行分割
                  part1=$(echo "$line" | cut -d',' -f1)
                  part2=$(echo "$line" | cut -d',' -f2)
                  # 输出分隔后的两部分内容（可选）
                  echo "Part 1: $part1"
                  echo "Part 2: $part2"
                  IMAGE_ORIGIN=${part1}
                  IMAGE_TARGET=${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_NS }}/${part2}
              else
                  # 根据斜杠分隔成两部分
                  part1=$(echo "$line" | cut -d'/' -f1)
                  part2=$(echo "$line" | cut -d'/' -f2)
                  if [[ ! $line =~ / ]] ; then
                      part1=library
                  fi
                  # 输出分隔后的两部分内容（可选）
                  echo "Part 1: $part1"
                  echo "Part 2: $part2"
                  IMAGE_ORIGIN=${part1}/${part2}
                  IMAGE_TARGET=${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_NS }}/${part1}-${part2}
              fi
              echo "IMAGE_ORIGIN: $IMAGE_ORIGIN"
              echo "IMAGE_TARGET: $IMAGE_TARGET"
              IMAGE_TARGET_NAME=$(echo -n "$IMAGE_TARGET" | cut -d':' -f1)
              IMAGE_TARGET_TAG=$(echo -n "$IMAGE_TARGET" | cut -d':' -f2)
              docker pull --platform=amd64 $IMAGE_ORIGIN
              docker tag $IMAGE_ORIGIN ${IMAGE_TARGET_NAME}:${IMAGE_TARGET_TAG}-amd64
              docker push ${IMAGE_TARGET_NAME}:${IMAGE_TARGET_TAG}-amd64
              docker pull --platform=arm64 $IMAGE_ORIGIN
              docker tag $IMAGE_ORIGIN ${IMAGE_TARGET_NAME}:${IMAGE_TARGET_TAG}-arm64
              docker push ${IMAGE_TARGET_NAME}:${IMAGE_TARGET_TAG}-arm64
              docker manifest create ${IMAGE_TARGET} ${IMAGE_TARGET_NAME}:${IMAGE_TARGET_TAG}-amd64 ${IMAGE_TARGET_NAME}:${IMAGE_TARGET_TAG}-arm64
              docker manifest push ${IMAGE_TARGET}
          done < images-v2.txt
